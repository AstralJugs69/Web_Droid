# Vector Rush Game - Implementation Plan

## Game Architecture & Implementation
- [X] Create modular game structure with core mechanics 
- [X] Implement input system for keyboard, mouse, and touch
- [X] Update player movement system with physics
- [X] Create enemy behaviors with different movement patterns
- [X] Implement bullets with proper trajectory and collision
- [X] Add collision detection system for player, enemies, and bullets
- [X] Create particle system for visual effects
- [X] Implement power-up system
- [ ] Create game renderer for WebGL/Canvas
- [ ] Design menu system and UI components
- [ ] Add audio system for game sound effects

## Core Game Flow
- [X] Set up game loop with proper timing
- [X] Create level progression and difficulty scaling
- [X] Implement scoring system with high score tracking
- [ ] Add game state transitions (menu, play, pause, game over)
- [ ] Create save/load system for game progress

## Lessons Learned
- **TypeScript Interfaces:** Created comprehensive interfaces to define game state types, ensuring type safety across components
- **Collision Detection:** Implemented circle-based collision detection for efficient hit testing between game entities
- **Particle Systems:** Created a flexible particle system for visual effects with variable parameters
- **Enemy AI:** Implemented different movement patterns for enemy types, using vector-based tracking

## WebDroid OS Project Implementation

## Goal
Replace procedural geometry in PhoneModel component with loaded GLTF models for a more realistic 3D view.

## Plan
- [X] Check the current implementation of InspectView.tsx and PhoneModel component
- [X] Create the public/models directory if it doesn't exist
- [ ] Create or acquire phone.glb and tablet.glb models
- [ ] Update InspectView.tsx to load and use GLTF models:
  - [ ] Import and use useGLTF from @react-three/drei
  - [ ] Get current device type from useSettings
  - [ ] Load the appropriate model based on device type
  - [ ] Replace the procedural geometry with the loaded model
  - [ ] Position and scale the model properly in the scene
  - [ ] Temporarily remove interactions with specific parts

## Lessons
- 3D model loading in React Three Fiber requires careful handling of asset paths
- GLTF models need to be properly set up with named meshes for interactive parts
- useGLTF.preload() helps with performance when loading models
- Positioning and scaling loaded models may require trial and error to match the existing scene

## Summary of Changes (Prompt #17):
- `WebDroid-OS/src/components/InspectView.tsx`: Updated to use GLTF models
- Created `WebDroid-OS/public/models` directory for model storage
- Added `phone.glb` and `tablet.glb` 3D models to public directory

## Goal
Implement Web Audio API sound synthesis to replace file-based audio assets

## Plan
- [X] Create a sound synthesis utility module (src/utils/soundSynth.ts)
  - [X] Implement getAudioContext() to handle AudioContext creation and browser compatibility
  - [X] Create generator functions for different sound types
  - [X] Add proper error handling and fallbacks
- [X] Update the useSound hook to use the sound synthesis module
  - [X] Import and use the generator functions
  - [X] Update the function signature to accept sound type instead of URL
  - [X] Ensure backward compatibility with existing code
- [X] Update components/classes to work with the new sound system
  - [X] Fix Game class and GameCanvas components
  - [X] Update collision system to use the new sound type
  - [X] Update bullet manager to use the new sound type
- [X] Remove file-based sound assets
  - [X] Delete the /public/sounds directory

## Lessons
- Web Audio API provides powerful programmatic sound synthesis capabilities
- Using synthesized sounds reduces asset size and HTTP requests
- Promise-based audio functions allow for proper sequencing of audio operations
- AudioContext provides a complete audio processing graph for advanced effects
- Oscillator and gain nodes can create a wide variety of simple sound effects
- Careful parameter tuning is essential for creating recognizable sound effects
- Ensuring backward compatibility through path extraction preserves existing code
- Web Audio API implementations should include proper fallbacks for unsupported browsers
- Different oscillator types (sine, square, triangle, sawtooth) produce distinct timbres
- Envelope shaping with gain nodes creates natural-sounding volume curves

## Summary of Changes (Prompt #35):
* Created soundSynth.ts utility module with 10 different sound generators
* Implemented AudioContext singleton pattern with proper error handling
* Created specialized sound functions for UI feedback and game events
* Updated useSound hook to work with the new sound synthesis system
* Maintained backward compatibility with code using the old URL-based approach
* Modified Game class and collision system to use the new sound types
* Removed dependency on external audio files
* Added volume control that respects global volume settings

*Next step: Test sound effects across different browsers and devices, fine-tune parameters for better audio quality*

*Waiting for further input...*

## Goal
Connect the global volume settings to the Web Audio API sound synthesis system

## Plan
- [X] Add a master gain node to the sound synthesis system
  - [X] Modify getAudioContext to create and return a master gain node
  - [X] Update all sound generators to connect to master gain node instead of ctx.destination
- [X] Implement setMasterVolume function in soundSynth.ts
  - [X] Add support for converting 0-100 scale to 0-1 gain values
  - [X] Add support for mute state
  - [X] Use linearRampToValueAtTime for smooth volume transitions
- [X] Connect SettingsContext to the sound system
  - [X] Import setMasterVolume in SettingsContext
  - [X] Add effect hook to update volume when settings change
  - [X] Update toggleSound, setVolumeLevel, and toggleMute handlers
- [X] Update useSound hook
  - [X] Remove volume adjustment in the hook since it's handled by master gain
  - [X] Update the context reference to use the new { ctx, masterGain } return format

## Lessons
- A master gain node provides a central control point for all audio output
- The Web Audio API's gain parameter accepts values from 0 to 1, requiring conversion from UI percentages
- Using linearRampToValueAtTime creates smoother volume transitions than immediate changes
- Separating audio routing (through master gain) from sound generation creates a cleaner architecture
- Centralized volume control ensures consistent sound levels across all generated sounds
- Using short transition times for volume changes (0.05s) provides responsive yet smooth adjustments
- Properly connecting UI controls to audio nodes creates a more integrated user experience
- The audio context returned from getAudioContext needed to be destructured to accommodate the new structure

## Summary of Changes (Prompt #36):
* Added a master gain node to soundSynth.ts that controls the final output volume
* Created setMasterVolume function to provide a central API for volume control
* Connected the SettingsContext volume settings to the sound synthesis system
* Updated all sound generator functions to output through the master gain node
* Modified useSound hook to work with the new architecture
* Implemented proper mute handling through the master gain node
* Added smooth transitions for volume changes using linearRampToValueAtTime

*Next step: Test the new volume control system across different interactions and ensure all volume adjustments work correctly*

## Goal
Consolidate theme management into SettingsContext and create a dedicated ThemesApp

## Plan
- [X] Update SettingsContext.tsx to incorporate theme management
  - [X] Remove useTheme import and move theme state into SettingsContext
  - [X] Add activeThemeId state with localStorage persistence
  - [X] Add systemPrefersDark state with media query listener
  - [X] Create currentMode derived value based on active theme and user preference
  - [X] Add theme-related functions to context value
- [X] Update App.tsx to remove ThemeProvider
  - [X] Keep only SettingsProvider as the single state provider
- [X] Update components that use ThemeContext
  - [X] Update ThemeToggleButton to use useSettings
  - [X] Update InspectView component to use currentMode
  - [X] Update DeviceFrame to use currentMode
  - [X] Update SettingsApp and DisplaySettingsPage
- [X] Create ThemesApp component
  - [X] Create basic component structure with AppContainer
  - [X] Implement theme selection UI with grid layout
  - [X] Add color mode toggle UI section
  - [X] Connect to activeThemeId state in SettingsContext
- [X] Add routing for ThemesApp
  - [X] Add ThemesApp to HomeScreen app config
  - [X] Import ThemesApp in DeviceFrame
  - [X] Add case for 'themes' in renderSpecificAppComponent

## Lessons
- Consolidating related state management into a single context improves maintainability
- Using derived state (like currentMode) provides flexibility while keeping the API simple
- localStorage persistence ensures settings are maintained between sessions
- Media query listeners can detect system preferences for adaptive theming
- CSS classes on the root element allow for theme-based styling throughout the app
- Forced mode support in themes allows for themes that always use light or dark mode
- Using a memoized value for derived state prevents unnecessary recalculations
- Proper cleanup of event listeners is important for avoiding memory leaks

## Summary of Changes (Prompt #37):
* Consolidated theme management into SettingsContext, removing the separate ThemeContext
* Added multiple theme support with activeThemeId state and theme-specific forced modes
* Created a new ThemesApp component for selecting themes with visual previews
* Updated all components to use the new theme management system
* Added system preference detection for dark mode
* Applied theme classes to the root HTML element for global styling
* Added a user-friendly interface for theme selection in a dedicated app

*Next step: Add CSS variables for theme-specific colors for each theme and improve theme preview visuals*

## Goal
Implement theme selection UI and CSS variables for consistent theming across the application

## Plan
- [X] Update availableThemes array in SettingsContext to include color information
  - [X] Add colors array to each theme object for visual previews
  - [X] Maintain existing theme properties like id, name, and forcedMode
- [X] Enhance ThemesApp component with improved UI
  - [X] Create clickable theme cards with border highlighting for selection
  - [X] Show visual color palette preview for each theme
  - [X] Add UI component preview for each theme
  - [X] Improve the color mode toggle controls with icons
- [X] Define comprehensive CSS variables for all themes in index.css
  - [X] Create variables for the default theme (light and dark modes)
  - [X] Create variables for Material You theme (light and dark modes)
  - [X] Create variables for Pixel theme (light and dark modes)
  - [X] Create variables for Synthwave theme (always dark)
  - [X] Include variables for colors, border radius, and fonts
- [X] Update Tailwind configuration to use CSS variables
  - [X] Replace hardcoded color values with CSS variable references
  - [X] Add support for font and border radius variables
  - [X] Maintain backward compatibility with existing class usage

## Lessons
- CSS variables provide a powerful way to implement theming at the root level
- Using selectors like `.theme-material.dark` allows for specific theme+mode combinations
- Tailwind can reference CSS variables to maintain design system consistency
- Previewing themes with actual UI components helps users understand visual differences
- Handling both forced dark mode and user-selectable modes requires careful conditionals
- Using color arrays for visual previews creates an effective color palette display
- Border highlighting for selection provides clear visual feedback
- Gracefully handling theme changes requires proper cascade in CSS selectors

## Summary of Changes (Prompt #38):
* Added color information to the availableThemes array in SettingsContext
* Enhanced the ThemesApp UI with improved theme preview cards showing color palettes
* Added a mini UI preview for each theme showing actual themed components
* Improved the color mode toggle with icons and better visual feedback
* Defined comprehensive CSS variables for all themes and modes in index.css
* Created variables for colors, border radius, and fonts for each theme
* Updated Tailwind configuration to use the CSS variables instead of hardcoded values
* Applied proper class handling for forced theme modes (like Synthwave's dark mode)

*Next step: Update key components like AppContainer and NavigationBar to fully utilize theme-specific variables* 